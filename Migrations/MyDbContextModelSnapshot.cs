// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ASM_C_4.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SeatingChartId")
                        .HasColumnType("int");

                    b.Property<string>("SoNganHang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartEvent")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("TicketId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Refund", b =>
                {
                    b.Property<int>("RefundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefundId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("RefundId");

                    b.HasIndex("TicketId")
                        .IsUnique()
                        .HasFilter("[TicketId] IS NOT NULL");

                    b.ToTable("Refunds");
                });

            modelBuilder.Entity("Seat", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeatId"));

                    b.Property<int>("PosX")
                        .HasColumnType("int");

                    b.Property<int>("PosY")
                        .HasColumnType("int");

                    b.Property<int>("SeatGroupId")
                        .HasColumnType("int");

                    b.Property<string>("SeatName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeatId");

                    b.HasIndex("SeatGroupId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("SeatGroup", b =>
                {
                    b.Property<int>("SeatGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeatGroupId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PosX")
                        .HasColumnType("int");

                    b.Property<int>("PosY")
                        .HasColumnType("int");

                    b.Property<int?>("SeatingChartId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketGroupId")
                        .HasColumnType("int");

                    b.HasKey("SeatGroupId");

                    b.HasIndex("SeatingChartId");

                    b.HasIndex("TicketGroupId");

                    b.ToTable("SeatGroups");
                });

            modelBuilder.Entity("SeatingChart", b =>
                {
                    b.Property<int>("SeatingChartId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PosX")
                        .HasColumnType("int");

                    b.Property<int?>("PosY")
                        .HasColumnType("int");

                    b.HasKey("SeatingChartId");

                    b.ToTable("SeatingCharts");
                });

            modelBuilder.Entity("ShowTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("ShowTimes");
                });

            modelBuilder.Entity("ShowTimeSeat", b =>
                {
                    b.Property<int>("ShowTimeId")
                        .HasColumnType("int");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.HasKey("ShowTimeId", "SeatId");

                    b.HasIndex("SeatId");

                    b.ToTable("ShowTimeSeats");
                });

            modelBuilder.Entity("ShowTimeTicketGroup", b =>
                {
                    b.Property<int>("ShowTimeId")
                        .HasColumnType("int");

                    b.Property<int>("TicketGruopId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("TicketSaleEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TicketSaleStart")
                        .HasColumnType("datetime2");

                    b.HasKey("ShowTimeId", "TicketGruopId");

                    b.HasIndex("TicketGruopId");

                    b.ToTable("ShowTimeTicketGroups");
                });

            modelBuilder.Entity("Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("TicketDetail", b =>
                {
                    b.Property<int>("TicketDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketDetailId"));

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.Property<int?>("ShowTimeId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("TicketDetailId");

                    b.HasIndex("TicketId");

                    b.HasIndex("ShowTimeId", "SeatId")
                        .IsUnique()
                        .HasFilter("[ShowTimeId] IS NOT NULL");

                    b.ToTable("TicketDetails");
                });

            modelBuilder.Entity("TicketGroup", b =>
                {
                    b.Property<int>("TicketGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketGroupId"));

                    b.Property<int>("MaxTicket")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TicketGroupId");

                    b.ToTable("TicketGroups");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Event", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Payment", b =>
                {
                    b.HasOne("Ticket", "Ticket")
                        .WithOne("Payment")
                        .HasForeignKey("Payment", "TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Refund", b =>
                {
                    b.HasOne("Ticket", "Ticket")
                        .WithOne("Refund")
                        .HasForeignKey("Refund", "TicketId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Seat", b =>
                {
                    b.HasOne("SeatGroup", "SeatGroup")
                        .WithMany("Seats")
                        .HasForeignKey("SeatGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SeatGroup");
                });

            modelBuilder.Entity("SeatGroup", b =>
                {
                    b.HasOne("SeatingChart", "SeatingChart")
                        .WithMany("SeatGroups")
                        .HasForeignKey("SeatingChartId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TicketGroup", "TicketGroup")
                        .WithMany("SeatGroups")
                        .HasForeignKey("TicketGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SeatingChart");

                    b.Navigation("TicketGroup");
                });

            modelBuilder.Entity("SeatingChart", b =>
                {
                    b.HasOne("Event", "Event")
                        .WithOne("SeatingChart")
                        .HasForeignKey("SeatingChart", "SeatingChartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ShowTime", b =>
                {
                    b.HasOne("Event", "Event")
                        .WithMany("ShowTimes")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ShowTimeSeat", b =>
                {
                    b.HasOne("Seat", "Seat")
                        .WithMany("ShowTimeSeats")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShowTime", "ShowTime")
                        .WithMany("ShowTimeSeats")
                        .HasForeignKey("ShowTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seat");

                    b.Navigation("ShowTime");
                });

            modelBuilder.Entity("ShowTimeTicketGroup", b =>
                {
                    b.HasOne("ShowTime", "ShowTime")
                        .WithMany("ShowTimeTicketGroups")
                        .HasForeignKey("ShowTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketGroup", "TicketGroup")
                        .WithMany("ShowTimeTicketGroups")
                        .HasForeignKey("TicketGruopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShowTime");

                    b.Navigation("TicketGroup");
                });

            modelBuilder.Entity("Ticket", b =>
                {
                    b.HasOne("Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TicketDetail", b =>
                {
                    b.HasOne("Ticket", "Ticket")
                        .WithMany("TicketDetails")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ShowTimeSeat", "ShowTimeSeat")
                        .WithOne("TicketDetail")
                        .HasForeignKey("TicketDetail", "ShowTimeId", "SeatId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ShowTimeSeat");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Event", b =>
                {
                    b.Navigation("SeatingChart")
                        .IsRequired();

                    b.Navigation("ShowTimes");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Seat", b =>
                {
                    b.Navigation("ShowTimeSeats");
                });

            modelBuilder.Entity("SeatGroup", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("SeatingChart", b =>
                {
                    b.Navigation("SeatGroups");
                });

            modelBuilder.Entity("ShowTime", b =>
                {
                    b.Navigation("ShowTimeSeats");

                    b.Navigation("ShowTimeTicketGroups");
                });

            modelBuilder.Entity("ShowTimeSeat", b =>
                {
                    b.Navigation("TicketDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("Ticket", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();

                    b.Navigation("Refund")
                        .IsRequired();

                    b.Navigation("TicketDetails");
                });

            modelBuilder.Entity("TicketGroup", b =>
                {
                    b.Navigation("SeatGroups");

                    b.Navigation("ShowTimeTicketGroups");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
