@using System.Globalization
@using System.Text.Json
@model List<ShowTimeSeatDto>
@{
    var listSeats = Model.GroupBy(s=>s.grName);
    var total = Model.Sum(s=>s.Price);
}
@section Styles{
    <style>
        .seat-table{
            max-height: 70vh;
            overflow-y: auto;
        }
        .seat-table::-webkit-scrollbar {
            display: none; /* Ẩn thanh cuộn */
        }
                /* Cho toàn bộ trang */
        body {
            overflow: auto;
            scrollbar-width: none; /* Firefox */
        }

        /* Cho Chrome, Edge, Safari */
        body::-webkit-scrollbar {
            display: none;
        }

    </style>
}
@if(TempData["Error"]!=null){
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["Error"]
        <button class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (TempData["Success"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["Success"]
        <button class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}


<h2>Xác nhận thanh toán</h2>

<div class="row mb-3 d-flex p-4 justify-content-center align-items-start">
    <div class="col-8 mb-3 seat-table" style="box-shadow: 0 0 10px rgb(78, 28, 28);">
        <table class="table">
            <thead>
                <tr>
                    <th>Ghế</th>
                    <th>Nhóm</th>
                    <th>Giá</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var group in listSeats)
                {
                    <tr class="table-secondary">
                        <td colspan="3"><strong>Nhóm: @group.Key</strong></td>
                    </tr>

                    foreach (var seat in group)
                    {
                        <tr>
                            <td>@seat.Name</td>
                            <td>@seat.grName</td>
                            <td>@seat.Price.ToString("C0",new CultureInfo("vi-VN"))</td>
                        </tr>
                    }
                }

            </tbody>
        </table>

    </div>
    <div class="d-flex justify-content-end col-4" >

        <form method="post" asp-action="Index" onsubmit="isPaid = true" class="d-flex flex-column rounded-2 w-75 p-4" style="box-shadow: 0 0 10px rgb(78, 28, 28);">
            <img src="https://img.vietqr.io/image/@(ViewBag.BankName)-@(ViewBag.BankNumber)-compact2.png?amount=@(total)" id="QrCode"
                alt="Qr thanh toán" width="100%" class="mb-3" />
            <span class="fw-bold mb-2 text-end"><strong>Tổng:</strong> @total.ToString("C0",new CultureInfo("vi-VN"))</span>
            @for (int i = 0; i < Model.Count; i++)
            {
                <input type="hidden" name="seatDtos[@i].SeatId" value="@Model[i].SeatId" />
                <input type="hidden" name="seatDtos[@i].ShowTimeId" value="@Model[i].ShowTimeId" />
                <input type="hidden" name="seatDtos[@i].Price" value="@Model[i].Price" />
                <input type="hidden" name="seatDtos[@i].Name" value="@Model[i].Name" />
                <input type="hidden" name="seatDtos[@i].grName" value="@Model[i].grName" />
            }
            <button type="submit" class="btn w-100 btn-success">Xác nhận & Thanh toán</button>
        </form>

    </div>
</div>

@section Scripts{
    <script>
        var isPaid = false;

        window.addEventListener("beforeunload", handleBeforeUnload);

        @* document.querySelector("button[type='submit']").addEventListener("click", function () {
            isPaid = true; // set trước khi browser unload
        });

        document.querySelector("form").addEventListener("submit",function (e) {
            e.preventDefault();

            isPaid = true;
            window.removeEventListener("beforeunload", handleBeforeUnload);

            Promise.resolve().then(() => {
                console.log("Submit",isPaid);
                this.submit();
            });
        }); *@



        function cancelSeatsIfNotPaid() {
            console.log(isPaid);
            const data = JSON.stringify(@Html.Raw(JsonSerializer.Serialize(Model)));
            const blob = new Blob([data], { type: 'application/json' }); // Đặt Content-Type
            navigator.sendBeacon('/Payment/CancelBooking', blob);
        }

        function handleBeforeUnload(e) {
            if (!isPaid) {
                console.log("User is leaving without payment.");
                cancelSeatsIfNotPaid();
            }
        }

        @* function cancelSeatsIfNotPaid() {
            Swal.fire({
                title: 'Bạn có chắc muốn hủy thanh toán?',
                text: "Việc này sẽ hủy tất cả ghế đã chọn.",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Xác nhận',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/Payment/CancelBooking', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(@Model})
                    }).then(response => response.json())
                      .then(data => {
                          if (response.ok) {
                              window.location.href = '/Home/Index';
                          } else {
                              alert(data.message);
                          }
                      });
                }
            });
        } *@

        @* window.addEventListener("pagehide", cancelSeatsIfNotPaid);
        document.addEventListener("visibilitychange", function () {
            if (document.visibilityState === "hidden") {
                cancelSeatsIfNotPaid();
            }
        }); *@
    </script>
}